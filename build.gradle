apply plugin: 'idea'
apply from: 'gradle/idea.gradle'

buildscript {
	ext {
		gaelykPluginVersion = '0.4'
		gaeGebPluginVersion = '0.3'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "org.gradle.api.plugins:gradle-gaelyk-plugin:$gaelykPluginVersion"
		classpath "org.gradle.api.plugins:gradle-gae-geb-plugin:$gaeGebPluginVersion"
	}
}

subprojects {
	apply plugin: 'groovy'
	apply plugin: 'idea'
	apply plugin: 'codenarc'

	version = '0.1'

	ext {
		groovyVersion = '1.8.6'
		gaeVersion = '1.7.0'
		gaelykVersion = '1.2'
		gebVersion = '0.7.0'
		spockVersion = '0.6-groovy-1.8'
		seleniumVersion = '2.22.0'
		gaelykRemoteVersion = '0.1'

		compatibilityVersion = 1.5
	}
	sourceCompatibility = compatibilityVersion
	targetCompatibility = compatibilityVersion

	repositories {
		mavenCentral()
		maven {
			url 'https://oss.sonatype.org/content/repositories/orggaelyk-272/'
		}
	}

	dependencies {
		groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
		codenarc 'org.codenarc:CodeNarc:0.17'
		testRuntime 'org.objenesis:objenesis:1.2'
	}

	codenarc {
		configFile = rootProject.file('config/codenarc/rulesets.groovy')
	}
}

configure(subprojects.findAll {it.name.startsWith('test-project')}) {
	apply plugin: 'gaelyk'
	apply plugin: 'gae-geb'

	dependencies {
		compile "org.gaelyk:gaelyk:$gaelykVersion"

		runtime "org.gaelyk:gaelyk-remote:$gaelykRemoteVersion",
			project(':gaelyk-functional-test-datastore-builder')

		gaeSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"

		testCompile "org.spockframework:spock-core:$spockVersion", {
			exclude group: 'org.codehaus.groovy', module: 'groovy-all'
		}
		functionalTestCompile project(':gaelyk-functional-test')
	}

	task createGroovletsDir << {
		new File(webAppDir, 'WEB-INF/groovy').mkdirs()
	}

	createGroovletsDir.outputs.file(new File(webAppDir, 'WEB-INF/groovy'))

	gaelykPrecompileGroovlet.dependsOn createGroovletsDir
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.1'
}

idea.project {
	ipr.withXml { provider ->
		def node = provider.asNode()

		// Set Gradle home
		def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
		gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
	}
}

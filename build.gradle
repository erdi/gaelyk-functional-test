apply plugin: 'idea'
apply from: "gradle/idea.gradle"

buildscript {
	ext {
		gaePluginVersion = '0.7.2'
		gaelykPluginVersion = '0.3.2'
		gaeGebPluginVersion = '0.3'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "org.gradle.api.plugins:gradle-gae-plugin:$gaePluginVersion"
		classpath "org.gradle.api.plugins:gradle-gaelyk-plugin:$gaelykPluginVersion"
		classpath "org.gradle.api.plugins:gradle-gae-geb-plugin:$gaeGebPluginVersion"
	}
}

subprojects {
	apply plugin: 'groovy'
	apply plugin: "idea"

	ext {
		groovyVersion = '1.8.6'
		gaeVersion = '1.6.6'
		gaelykVersion = '1.2'
		gebVersion = '0.7.0'
		spockVersion = '0.6-groovy-1.8'
		seleniumVersion = '2.22.0'

		compatibilityVersion = 1.5
	}
	sourceCompatibility = compatibilityVersion
	targetCompatibility = compatibilityVersion

	repositories {
		mavenCentral()
		mavenLocal()
	}

	dependencies {
		groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
	}
}

configure(subprojects.findAll {it.name.startsWith('test-project')}) {
	apply plugin: 'gae'
	apply plugin: 'gaelyk'
	apply plugin: 'gae-geb'

	dependencies {
		compile "org.gaelyk:gaelyk:$gaelykVersion",
				project(':gaelyk-functional-test')

		gaeSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"

		testCompile "org.spockframework:spock-core:$spockVersion", {
			exclude group: 'org.codehaus.groovy', module: 'groovy-all'
		}
	}

	gae {
		downloadSdk = true
		optimizeWar = false
		warDir = project.file('src/main/webapp/')
	}

	sourceSets.main.output.classesDir = 'src/main/webapp/WEB-INF/classes'

	clean {
		delete sourceSets*.output.classesDir
	}

	task copyRuntimeLibraries(type: Sync) {
		def webAppLibDirName = 'src/main/webapp/WEB-INF/lib'
		description = "Copies runtime libraries to $webAppLibDirName."
		from configurations.runtime
		into webAppLibDirName
	}

	gaeRun.dependsOn copyRuntimeLibraries

	task createGroovletsDir << {
		new File(webAppDir, 'WEB-INF/groovy').mkdirs()
	}

	createGroovletsDir.outputs.file(new File(webAppDir, 'WEB-INF/groovy'))

	gaelykPrecompileGroovlet.dependsOn createGroovletsDir
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.0'
}

idea.project {
	ipr.withXml { provider ->
		def node = provider.asNode()

		// Set Gradle home
		def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
		gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
	}
}
